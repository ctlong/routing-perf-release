#!/bin/bash -l

set -e

LOG_DIR=/var/vcap/sys/log/performance_tests
GOSTATIC_BACKEND_HOST=<%= link("static").instances[0].address %>
GOROUTER_PROXY_URI=<%= p("performance_tests.protocol") %>://${1}:<%= p("performance_tests.port") %>
GOROUTER_HTTPS_PROXY_URI=https://10.0.1.8:443

RPS_LOWER_LIMIT=<%= p("performance_tests.throughput_lower_limit") %>
LATENCY_UPPER_LIMIT_90=<%= p("performance_tests.latency_upper_limit_90") %>
LATENCY_UPPER_LIMIT_95=<%= p("performance_tests.latency_upper_limit_95") %>
LATENCY_UPPER_LIMIT_99=<%= p("performance_tests.latency_upper_limit_99") %>

TOTAL_REQUESTS=<%= p("performance_tests.num_requests") %>
TOTAL_CONCURRENT=<%= p("performance_tests.concurrent_requests") %>


RPS=0
LATENCY_90=0
LATENCY_95=0
LATENCY_99=0
NUM_OK="could not extract status codes of responses from summary"

ensure_log_dir() {
  mkdir -p ${LOG_DIR}
}

run_perf_tests() {
  date=$(date +%s)

  # run load test against gorouter using http1
  echo "Starting gorouter http1 load test of ${TOTAL_REQUESTS} requests, ${TOTAL_CONCURRENT} concurrent..."
  exec /var/vcap/packages/hey/bin/hey \
    -n $TOTAL_REQUESTS \
    -c $TOTAL_CONCURRENT \
    -t 0 \
    -cert /var/vcap/jobs/performance_tests/config/certs/client.crt \
    -key /var/vcap/jobs/performance_tests/config/certs/client.key \
    -host "h1.oliviabensonfromsvu.capi.land" \
    ${GOROUTER_HTTPS_PROXY_URI} | tee ${LOG_DIR}/routed_loadtest_${date}.log
  echo ""

  # run load test against gorouter using http2
  echo "Starting gorouter http2 load test of ${TOTAL_REQUESTS} requests, ${TOTAL_CONCURRENT} concurrent..."
  exec /var/vcap/packages/hey/bin/hey \
    -n $TOTAL_REQUESTS \
    -c $TOTAL_CONCURRENT \
    -t 0 \
    -h2 \
    -cert /var/vcap/jobs/performance_tests/config/certs/client.crt \
    -key /var/vcap/jobs/performance_tests/config/certs/client.key \
    -host "h2.oliviabensonfromsvu.capi.land" \
    ${GOROUTER_HTTPS_PROXY_URI} | tee ${LOG_DIR}/routed_loadtest_${date}.log
  echo ""

  # run load test aginst h1 envoy using http1
  echo "Starting h1 envoy test of ${TOTAL_REQUESTS} requests, ${TOTAL_CONCURRENT} concurrent..."
  exec /var/vcap/packages/hey/bin/hey \
    -n $TOTAL_REQUESTS \
    -c $TOTAL_CONCURRENT \
    -t 0 \
    -cert /var/vcap/jobs/performance_tests/config/certs/envoy.crt \
    -key /var/vcap/jobs/performance_tests/config/certs/envoy.key \
    https://10.0.1.13:61002 | tee ${LOG_DIR}/routed_loadtest_${date}.log
    echo ""

  # run load test aginst h2 envoy using http2
  echo "Starting h2 envoy test of ${TOTAL_REQUESTS} requests, ${TOTAL_CONCURRENT} concurrent..."
  exec /var/vcap/packages/hey/bin/hey \
    -n $TOTAL_REQUESTS \
    -c $TOTAL_CONCURRENT \
    -t 0 \
    -cert /var/vcap/jobs/performance_tests/config/certs/envoy.crt \
    -key /var/vcap/jobs/performance_tests/config/certs/envoy.key \
    -h2 \
    https://10.0.1.14:61002 | tee ${LOG_DIR}/routed_loadtest_${date}.log
    echo ""

  echo "Starting h1 direct load test of ${TOTAL_REQUESTS} requests, ${TOTAL_CONCURRENT} concurrent..."
  exec /var/vcap/packages/hey/bin/hey \
    -n $TOTAL_REQUESTS \
    -c $TOTAL_CONCURRENT \
    -t 0 \
    http://10.0.1.13:61000 | tee ${LOG_DIR}/direct_loadtest_${date}.log
  echo ""

  echo "Starting h2 direct load test of ${TOTAL_REQUESTS} requests, ${TOTAL_CONCURRENT} concurrent..."
  exec /var/vcap/packages/hey/bin/hey \
    -n $TOTAL_REQUESTS \
    -c $TOTAL_CONCURRENT \
    -t 0 \
    -h2 \
    http://10.0.1.14:61000 | tee ${LOG_DIR}/direct_loadtest_${date}.log
  echo ""

  # requests / sec
  data=$(grep -E "Requests/sec|responses" ${LOG_DIR}/routed_loadtest_${date}.log | tr -s "\n" "," | cut -f 1 -d "," | cut -f 2 -d ":")
  RPS=${data//[[:blank:]]/}
  echo "routed_requests_per_sec: ${RPS}"

  # requests / sec
  direct_data=$(grep -E "Requests/sec|responses" ${LOG_DIR}/direct_loadtest_${date}.log | tr -s "\n" "," | cut -f 1 -d "," | cut -f 2 -d ":")
  DIRECT_RPS=${direct_data//[[:blank:]]/}
  echo "direct_requests_per_sec: ${DIRECT_RPS}"

  latencies=($(grep "90% in " -A 3 ${LOG_DIR}/routed_loadtest_${date}.log | awk '{print $3}'))
  LATENCY_90=${latencies[0]}
  LATENCY_95=${latencies[1]}
  LATENCY_99=${latencies[2]}
  echo "90% of response times: ${LATENCY_90} secs"
  echo "95% of response times: ${LATENCY_95} secs"
  echo "99% of response times: ${LATENCY_99} secs"

  NUM_OK=$(grep -E "\[200\].*responses" ${LOG_DIR}/routed_loadtest_${date}.log | awk '{ print $2 }')
}


main() {
  echo "Performance test run for ${GOROUTER_PROXY_URI}:"
  ensure_log_dir
  run_perf_tests

  if [[ ${NUM_OK} != ${TOTAL_REQUESTS} ]]; then
    echo "Performance tests generated HTTP error from router"
    exit 1
  fi

  RPSINT=`echo ${RPS} | cut -f 1 -d "."`

  if [[ ${RPSINT} -lt ${RPS_LOWER_LIMIT} ]]; then
    echo "${RPS} requests per second is lower than threshold of ${RPS_LOWER_LIMIT}"
    exit 1
  fi

  LATENCY_90_INT=`echo - | awk "{print ${LATENCY_90} * 10000 }" | cut -f 1 -d "."`
  LATENCY_95_INT=`echo - | awk "{print ${LATENCY_95} * 10000 }" | cut -f 1 -d "."`
  LATENCY_99_INT=`echo - | awk "{print ${LATENCY_99} * 10000 }" | cut -f 1 -d "."`
  LATENCY_UPPER_LIMIT_90_INT=`echo - | awk "{print ${LATENCY_UPPER_LIMIT_90} * 10 }" | cut -f 1 -d "."`
  LATENCY_UPPER_LIMIT_95_INT=`echo - | awk "{print ${LATENCY_UPPER_LIMIT_95} * 10 }" | cut -f 1 -d "."`
  LATENCY_UPPER_LIMIT_99_INT=`echo - | awk "{print ${LATENCY_UPPER_LIMIT_99} * 10 }" | cut -f 1 -d "."`

  LATENCY_90_MS=`echo - | awk "{print ${LATENCY_90} * 1000 }"`
  LATENCY_95_MS=`echo - | awk "{print ${LATENCY_95} * 1000 }"`
  LATENCY_99_MS=`echo - | awk "{print ${LATENCY_99} * 1000 }"`

  if [[ ${LATENCY_90_INT} -gt ${LATENCY_UPPER_LIMIT_90_INT} ]]; then
    echo "The 90th percentile latency, ${LATENCY_90_MS} ms, is higher than the threshold of ${LATENCY_UPPER_LIMIT_90} ms"
    exit 1
  fi
  if [[ ${LATENCY_95_INT} -gt ${LATENCY_UPPER_LIMIT_95_INT} ]]; then
    echo "The 95th percentile latency, ${LATENCY_95_MS} ms, is higher than the threshold of ${LATENCY_UPPER_LIMIT_95} ms"
    exit 1
  fi
  if [[ ${LATENCY_99_INT} -gt ${LATENCY_UPPER_LIMIT_99_INT} ]]; then
    echo "The 99th percentile latency, ${LATENCY_99_MS} ms, is higher than the threshold of ${LATENCY_UPPER_LIMIT_99} ms"
    exit 1
  fi
}

main
